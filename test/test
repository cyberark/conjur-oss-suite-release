#!/usr/bin/env bash
set -euox pipefail

cd "$(dirname "$0")"

. ./store.sh

function reset_infra() {
  kubectl delete namespace "$(store_get TEST_NAMESPACE)" --ignore-not-found
  kubectl delete clusterrolebinding --ignore-not-found "$(store_get CONJUR_RELEASE_NAME)-conjur-authenticator"
  kubectl delete clusterrole --ignore-not-found "$(store_get CONJUR_RELEASE_NAME)-conjur-authenticator"
  kubectl delete namespace "$(store_get TEST_NAMESPACE)" --ignore-not-found
}

function cleanup() {
  echo "Cleaning up."

  # snapshot of workloads
  kubectl --namespace "$(store_get TEST_NAMESPACE)" get pods
  kubectl --namespace "$(store_get TEST_NAMESPACE)" get events --field-selector type=Warning

  reset_infra
  store_destroy
}

function main() {
  trap "store_destroy || true" EXIT
  store_init

  store_set HELM_CHART_RELEASE_VERSION 1.3.8
  store_set CONJUR_OSS_RELEASE_VERSION 1.4.1
  store_set CONJUR_KUBERNETES_AUTHENTICATOR_RELEASE_VERSION 0.15.0

  store_set TEST_NAMESPACE "suite-test-$(openssl rand -hex 2)"

  store_set PG_RELEASE_NAME conjur-db
  store_set DB_PASSWORD databasepassword

  store_set CONJUR_RELEASE_NAME "$(store_get TEST_NAMESPACE)-conjur-oss"
  store_set DATA_KEY c+KONZjTUk9zWib4IKeAX5kUltghDtEH7JJOJYxjc9A=

  store_set CONJUR_ACCOUNT another
  store_set CONJUR_ADMIN_API_KEY "to be retrieved dynamically"
  store_set AUTHENTICATOR_ID testing
  store_set CONJUR_URL "https://$(store_get CONJUR_RELEASE_NAME).$(store_get TEST_NAMESPACE).svc.cluster.local"

  store_set APP_SERVICE_ACCOUNT test-app

  store_set CLI_POD_NAME "test-client"

  trap "cleanup || true" EXIT
  reset_infra

  # setup infrastructure for testing
  ./prepare.sh

  # execute test cases
  go test -v -count=1 --tags=release_test ./...
}

main
