#!/usr/bin/env bash
set -euxo pipefail

cd "$(dirname "$0")"

. ./store.sh

function reset_infra() {
  local TEST_NAMESPACE CONJUR_RELEASE_NAME
  TEST_NAMESPACE="$(store_get TEST_NAMESPACE)"
  CONJUR_RELEASE_NAME="$(store_get CONJUR_RELEASE_NAME)"

  kubectl delete namespace "${TEST_NAMESPACE}" --ignore-not-found
  kubectl delete clusterrolebinding --ignore-not-found "${CONJUR_RELEASE_NAME}-conjur-authenticator"
  kubectl delete clusterrole --ignore-not-found "${CONJUR_RELEASE_NAME}-conjur-authenticator"
}

function complete_cleanup() {
  # inherit exit_code or use $?
  local exit_code="${exit_code:-$?}"
  export exit_code

  local TEST_NAMESPACE
  TEST_NAMESPACE="$(store_get TEST_NAMESPACE || true)"

  echo "Cleaning up."

  # snapshot of workloads
  kubectl --namespace "${TEST_NAMESPACE}" get pods || true
  kubectl --namespace "${TEST_NAMESPACE}" get events --field-selector type=Warning || true

  reset_infra || true
  store_cleanup || true
}

function store_set_component_versions() {
  echo "Setting component versions in the store from suite.yml"

  # Set components versions in the store from suite.yml
  go run ./store-component-versions.go ./init_store.go -f ../suite.yml

  local HELM_CHART_RELEASE_VERSION CONJUR_OSS_RELEASE_VERSION SECRETLESS_RELEASE_VERSION
  HELM_CHART_RELEASE_VERSION="$(store_get "release.cyberark/conjur-oss-helm-chart.version")"
  CONJUR_OSS_RELEASE_VERSION="$(store_get "release.cyberark/conjur.version")"
  SECRETLESS_RELEASE_VERSION="$(store_get "release.cyberark/secretless-broker.version")"

  store_set HELM_CHART_RELEASE_VERSION "${HELM_CHART_RELEASE_VERSION}"
  store_set CONJUR_OSS_RELEASE_VERSION "${CONJUR_OSS_RELEASE_VERSION}"
  store_set SECRETLESS_RELEASE_VERSION "${SECRETLESS_RELEASE_VERSION}"
}

function main() {
  # exit cleans up only store, at this point, because nothing else has been created
  trap "store_cleanup" EXIT

  store_init

  # extract component version from suite.yml in root directory
  store_set_component_versions

  local TEST_NAMESPACE
  TEST_NAMESPACE="suite-test-$(openssl rand -hex 2)"
  store_set TEST_NAMESPACE "${TEST_NAMESPACE}"

  store_set PG_RELEASE_NAME "conjur-db"
  store_set DB_PASSWORD "databasepassword"

  local CONJUR_RELEASE_NAME
  CONJUR_RELEASE_NAME="$(store_get TEST_NAMESPACE)-conjur-oss"
  store_set CONJUR_RELEASE_NAME "${CONJUR_RELEASE_NAME}"

  store_set DATA_KEY "c+KONZjTUk9zWib4IKeAX5kUltghDtEH7JJOJYxjc9A="

  store_set CONJUR_ACCOUNT "another"
  store_set CONJUR_ADMIN_API_KEY "to be retrieved dynamically"
  store_set AUTHENTICATOR_ID "testing"

  local CONJUR_URL
  CONJUR_URL="https://$(store_get CONJUR_RELEASE_NAME).$(store_get TEST_NAMESPACE).svc.cluster.local"
  store_set CONJUR_URL "${CONJUR_URL}"

  store_set APP_SERVICE_ACCOUNT "test-app"

  store_set CLI_POD_NAME "test-client"

  # exit should now result in complete cleanuip
  trap "complete_cleanup" EXIT
  reset_infra

  # setup infrastructure for testing
  ./prepare.sh

  # execute test cases
  go test -v -count=1 --tags=release_test ./...
}

main
